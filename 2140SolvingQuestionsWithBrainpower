/*
Hint-
(1/5)
For each question, we can either solve it or skip it. How can we use Dynamic Programming to decide the most optimal option for each problem?
(2/5)
We store for each question the maximum points we can earn if we started the exam on that question.
(3/5)
If we skip a question, then the answer for it will be the same as the answer for the next question.
(4/5)
If we solve a question, then the answer for it will be the points of the current question plus the answer for the next solvable question.
(5/5)
The maximum of these two values will be the answer to the current question.
*/

class Solution {
  public long mostPoints(int[][] questions) {
    final int n = questions.length;
    // dp[i] := max points starting from questions[i]
    long[] dp = new long[n + 1];

    for (int i = n - 1; i >= 0; --i) {
      final int points = questions[i][0];
      final int brainpower = questions[i][1];
      final int nextIndex = i + brainpower + 1;
      final long nextPoints = nextIndex < n ? dp[nextIndex] : 0;
      dp[i] = Math.max(points + nextPoints, dp[i + 1]);
    }

    return dp[0];
  }
}

Related Topics-
Array
Dynamic Programming
