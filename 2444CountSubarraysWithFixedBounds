/*
Hint-
(1/3)
Can you solve the problem if all the numbers in the array were between minK and maxK inclusive?
(2/3)
Think of the inclusion-exclusion principle.
(3/3)
Divide the array into multiple subarrays such that each number in each subarray is between minK and maxK inclusive, 
solve the previous problem for each subarray, and sum all the answers.
*/

class Solution {
    public long countSubarrays(int[] nums, int minK, int maxK) {
    long ans = 0;
    int j = -1;
    int prevMinKIndex = -1;
    int prevMaxKIndex = -1;

    for (int i = 0; i < nums.length; ++i) {
      if (nums[i] < minK || nums[i] > maxK)
        j = i;
      if (nums[i] == minK)
        prevMinKIndex = i;
      if (nums[i] == maxK)
        prevMaxKIndex = i;
        
      ans += Math.max(0, Math.min(prevMinKIndex, prevMaxKIndex) - j);
    }

    return ans;
  }
}

Related Topics-
Array
Queue
Sliding Window
Monotonic Queue
