class Solution {
    public int repeatedStringMatch(String A, String B) {
        final int n = (int) Math.ceil((double) B.length() / (double) A.length());
        final String s = String.join("", Collections.nCopies(n, A));
        if (s.contains(B)) return n;
        else if ((s + A).contains(B)) return n + 1;
        return -1;
    }
}

/*
        int aLen = a.length();
        int bLen = b.length();
        boolean flag = false;
        
        HashMap<Character,Integer> aMap = new HashMap();
        HashSet<Character> aMapSet = new HashSet();
        HashMap<Character,Integer> bMap = new HashMap();

        for(int i=0; i<aLen; i++) {
            aMap.put(a.charAt(i),aMap.getOrDefault(a.charAt(i),0)+1);
            aMapSet.add(a.charAt(i));
        }

        for(int i=0; i<bLen; i++) {
            if(aMap.containsKey(b.charAt(i))==false) return -1;
            bMap.put(b.charAt(i),bMap.getOrDefault(b.charAt(i),0)+1);
            aMapSet.remove(b.charAt(i));
        }
        if(aMapSet.size()>0) flag = true;

        int low = 0;
        int high = 0;
        int count = 1;
        int lIdx = -1;
        while(high<bLen) {
            if(low==aLen) {
                low = 0;
                count++;
                if(count > 2 && flag==true) return -1;
            }
            if(high>0 && (a.charAt(low)!=b.charAt(high))) {
                if(high==lIdx && count > 1) return -1;
                lIdx = high;
                high=0;
            }
            else if(a.charAt(low)!=b.charAt(high)) low++;
            else {
                low++;
                high++;
            }
        }
        return count;
    }
}
*/

Related Topics-
String
String Matching
