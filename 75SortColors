/*
Hint-
(1/3)
A rather straight forward solution is a two-pass algorithm using counting sort.
(2/3)
Iterate the array counting number of 0's, 1's, and 2's.
(3/3)
Overwrite array with the total number of 0's, then 1's and followed by 2's.
*/

class Solution {
    public void sortColors(int[] nums) {
        int redSt=0, bluSt=nums.length-1;
        int i=0;
        while(i<bluSt+1){
            if(nums[i]==0){
                int tmp = nums[i];
                nums[i] = nums[redSt];
                nums[redSt] = tmp;
                redSt++;
                i++;
                continue;
            }
            if(nums[i] ==2){
                int tmp = nums[i];
                nums[i] = nums[bluSt];
                nums[bluSt] = tmp;
                bluSt--;
                continue;
            }
            i++;
        }
    }
}

/*
class Solution {
    public void sortColors(int[] nums) {
        int n = nums.length;
        int zero = 0;
        int two = 0;

        for(int i=0; i<n; i++) {
            if(nums[i]==0) zero++;
            else if(nums[i]==2) two++;
        }

        int one = n-(two+zero);
        for(int i=0; i<zero; i++) {
            nums[i] = 0;
        }

        for(int i=zero; i<zero+one; i++) {
            nums[i] = 1;
        }

        for(int i=zero+one; i<n; i++) {
            nums[i] = 2;
        }
    }
}
*/

Related Topics-
Array
Two Pointers
Sorting
