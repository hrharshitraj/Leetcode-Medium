/*
Hint
(1/3)
If you simulate the problem, it will be O(n^2) which is not efficient.

Hint
(2/3)
Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.

Hint
(3/3)
How can you calculate the amount of water at each step?
*/

class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        if(n==1) return 0;
        int max = 0;

        int low = 0;
        int high = n-1;

        while(low<high) {
            int cap = Math.min(height[low],height[high]) * (high-low);
            max = Math.max(max,cap);

            if(height[low]<height[high]) low++;
            else high--;
        }
        return max;
    }
}

Related Topics-
Array
Two Pointers
Greedy
