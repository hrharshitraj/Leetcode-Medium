/*
Hint-
(1/3)
Well for some problems, the best way really is to come up with some algorithms for simulation. 
Basically, you need to simulate what the problem asks us to do.
(2/3)
We go boundary by boundary and move inwards. That is the essential operation. 
First row, last column, last row, first column, and then we move inwards by 1 and repeat. 
That's all. That is all the simulation that we need.
(3/3)
Think about when you want to switch the progress on one of the indexes. 
If you progress on i out of [i, j], you'll shift in the same column. 
Similarly, by changing values for j, you'd be shifting in the same row. 
Also, keep track of the end of a boundary so that you can move inwards and then keep repeating. 
It's always best to simulate edge cases like a single column or a single row to see if anything breaks or not.
*/

class Solution {
  public List<Integer> spiralOrder(int[][] matrix) {
    if (matrix.length == 0)
      return new ArrayList<>();

    final int m = matrix.length;
    final int n = matrix[0].length;
    List<Integer> ans = new ArrayList<>();
    int r1 = 0;
    int c1 = 0;
    int r2 = m - 1;
    int c2 = n - 1;

    // Repeatedly add matrix[r1..r2][c1..c2] to ans
    while (ans.size() < m * n) {
      for (int j = c1; j <= c2 && ans.size() < m * n; ++j)
        ans.add(matrix[r1][j]);
      for (int i = r1 + 1; i <= r2 - 1 && ans.size() < m * n; ++i)
        ans.add(matrix[i][c2]);
      for (int j = c2; j >= c1 && ans.size() < m * n; --j)
        ans.add(matrix[r2][j]);
      for (int i = r2 - 1; i >= r1 + 1 && ans.size() < m * n; --i)
        ans.add(matrix[i][c1]);
      ++r1;
      ++c1;
      --r2;
      --c2;
    }

    return ans;
  }
}

Related Topics-
Array
Matrix
Simulation
