class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length;
        if(n==1) return nums[0];

        int low = 0;
        int high = n-1;

        while(low<=high) {
            int mid = (low+high)/2;
            if(mid==0 && nums[mid]!=nums[mid+1]) return nums[mid];
            else if(mid==n-1 && nums[mid]!=nums[mid-1]) return nums[mid];
            
            else {
                if(mid%2==0) {
                    if(nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1]) return nums[mid];
                    else if(nums[mid]==nums[mid+1]) low = mid+1;
                    else high = mid;
                }
                else {
                    if(nums[mid]!=nums[mid-1] && nums[mid]!=nums[mid+1]) return nums[mid];
                    else if(nums[mid]==nums[mid+1]) high = mid;
                    else low = mid+1;
                }
            }
        }
        return -1;
    }
}

Related Topics-
Array
Binary Search
