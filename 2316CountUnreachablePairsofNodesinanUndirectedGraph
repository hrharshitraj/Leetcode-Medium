/*
Hint-
(1/3)
Find the connected components of the graph. To find connected components, 
you can use Union Find (Disjoint Sets), BFS, or DFS.
(2/3)
For a node u, the number of nodes that are unreachable from u is 
the number of nodes that are not in the same connected component as u.
(3/3)
The number of unreachable nodes from node u will be the same
for the number of nodes that are unreachable from node v if 
nodes u and v belong to the same connected component.
*/

class Solution {
    public long countPairs(int n, int[][] edges) {
    long ans = 0;
    List<Integer>[] graph = new List[n];
    boolean[] seen = new boolean[n];
    int unreached = n;

    for (int i = 0; i < n; ++i)
      graph[i] = new ArrayList<>();

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      graph[u].add(v);
      graph[v].add(u);
    }

    for (int i = 0; i < n; ++i) {
      final int reached = dfs(graph, i, seen);
      unreached -= reached;
      ans += (long) unreached * reached;
    }
    return ans;
  }

  private int dfs(List<Integer>[] graph, int u, boolean[] seen) {
    if (seen[u])
      return 0;

    seen[u] = true;
    int ans = 1;
    for (final int v : graph[u])
      ans += dfs(graph, v, seen);
    return ans;
  }
}

Related Topics-
Depth-First Search
Breadth-First Search
Union Find
Graph
