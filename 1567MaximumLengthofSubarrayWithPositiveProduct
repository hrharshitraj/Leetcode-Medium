/*
Hint
(1/3)
Split the whole array into subarrays by zeroes since a subarray with positive product cannot contain any zero.

Hint
(2/3)
If the subarray has even number of negative numbers, the whole subarray has positive product.

Hint
(3/3)
Otherwise, we have two choices, either - remove the prefix till the first negative element in this subarray,
or remove the suffix starting from the last negative element in this subarray.

*/

class Solution {
    public int getMaxLen(int arr[]) { 
        int n = arr.length;
        int pos = 0;
        int neg = 0;
        int ans = 0;

        for(int i=0; i<n; i++) {
            if(arr[i]==0) {
                pos = 0;
                neg = 0;
            } 
            else if(arr[i]>0) {
                pos++;
                if(neg > 0) {
                    neg++;
                }
            } 
            else if(arr[i]<0) {
                int temp = pos;
                if(neg > 0){
                    pos = 1 + neg;
                } else {
                    pos = 0;
                }
                neg = 1 + temp;
            }
            ans = Math.max(ans,pos);
        }
        return ans;
    }
}

Related Topics-
Array
Dynamic Programming
Greedy
