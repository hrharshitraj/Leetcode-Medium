/*
Hint-
(1/3)
To calculate the average of a subarray, you need the sum and the K. K is already given. How could you quickly calculate the sum of a subarray?
(2/3)
Use the Prefix Sums method to calculate the subarray sums.
(3/3), NOTE:
It is possible that the sum of all the elements does not fit in a 32-bit integer type. Be sure to use a 64-bit integer type for the prefix sum array.
*/

class Solution {
    public int[] getAverages(int[] nums, int k) {
        int n = nums.length;
        int low = 0;
        int high = 0;

        int[] avg = new int[n];
        Arrays.fill(avg,-1);
        // if(k>n/2) return avg;

        long sum = 0;  // Hint-3;
        while(high<n && high<=(2*k)) {
            sum += nums[high];
            high++;
        }

        if(high<(2*k)+1) return avg;
        high--;
        int curr = k;
        int size = 2*k+1;
        while(high<n) {
            avg[curr] = (int)(sum/(high-low+1));

            sum -= nums[low];
            curr++;
            high++;
            low++;

            if(high<n) sum += nums[high];
        }
        return avg;
    }
}

Related Topics-
Array
Sliding Window

        /*
        int n = nums.length;
        int size = 2*k+1;
        int[] ans = new int[n];
        Arrays.fill(ans, -1);
        if (size>n) return ans;

        long sum = 0;

        for(int i=0; i<size; i++) sum += nums[i];

        for (int i=k; i+k < n; i++) {
            ans[i] = (int)(sum / size);
            if (i+k+1 < n)
                sum += nums[i+k+1]-nums[i-k];
            }
        return ans;
        */
