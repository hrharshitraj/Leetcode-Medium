class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int sum = 0;

        // If you get the next day stock's value is greater than the current day, it means you can buy the stock on the current day and sell it on next one and the profit will be their difference;
        for(int i=1; i<n; i++) {
            if(prices[i]>prices[i-1]) sum += prices[i]-prices[i-1];
            /* Ex-
            1 5 7;
            i = 1;
            5>1 -> sum = sum + prices[1]-prices[0] -> 0 + 5-1 = 4;
            i = 2;
            7>5 -> sum = sum + prices[2]-prices[1] -> 4 + 7-5 = 6;
            profit = 6;
            */
        }
        return sum;
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int minPrice = prices[0];
        int profit = 0;
        int sum = 0;

        for(int i=1; i<n; i++) {
            if((prices[i]<=minPrice) || (prices[i]<prices[i-1])) {
                sum += profit;
                profit = 0;
                minPrice = prices[i];
            }
            else if(prices[i]>minPrice) {
                profit = Math.max(profit,(prices[i]-minPrice));
            }
        }
        sum += profit;
        return sum;
    }
}

Related Topics-
Array
Dynamic Programming
Greedy
