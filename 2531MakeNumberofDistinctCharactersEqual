class Solution {
    public void insertAndRemove(Map<Character, Integer> map, char toInsert, char toRemove) {
        map.put(toInsert, map.getOrDefault(toInsert, 0)+1);
        map.put(toRemove, map.getOrDefault(toRemove, 0) -1);
        if (map.get(toRemove) == 0) map.remove(toRemove);
    }

    public boolean isItPossible(String word1, String word2) {
        Map<Character, Integer> map1 = new HashMap<>();
        Map<Character, Integer> map2 = new HashMap<>();

        for (char w1: word1.toCharArray()) {
            map1.put(w1, map1.getOrDefault(w1, 0) +1);
        }
        for (char w2: word2.toCharArray()) {
            map2.put(w2, map2.getOrDefault(w2, 0) +1 );

        }

        for (char c1 = 'a'; c1 <= 'z'; c1++) {
            for (char c2='a'; c2 <= 'z'; c2++) {
                if (!map1.containsKey(c1) || !map2.containsKey(c2)) continue;

                insertAndRemove(map1, c2, c1);
                insertAndRemove(map2, c1, c2);

                if (map1.size() == map2.size()) return true;

                //roll back
                insertAndRemove(map1,c1,c2);
                insertAndRemove(map2,c2,c1);

            }
        }
        return false;
    }
}

/*
    public boolean isItPossible(String word1, String word2) {
    final int[] count1 = getCount(word1);
    final int[] count2 = getCount(word2);
    final int distinct1 = getDistinct(count1);
    final int distinct2 = getDistinct(count2);

    for (int i = 0; i < 26; ++i)
      for (int j = 0; j < 26; ++j) {
        if (count1[i] == 0 || count2[j] == 0)
          continue;
        if (i == j) {
          // Swapping the same chars won't change the # of distinct chars in
          // each string, so just check if `distinct1 == distinct2`.
          if (distinct1 == distinct2)
            return true;
          continue;
        }
        // The calculation is meaningful only when i != j.
        // Swap ('a' + i) in word1 with ('a' + j) in word2.
        final int distinctAfterSwap1 =
            distinct1 - (count1[i] == 1 ? 1 : 0) + (count1[j] == 0 ? 1 : 0);
        final int distinctAfterSwap2 =
            distinct2 - (count2[j] == 1 ? 1 : 0) + (count2[i] == 0 ? 1 : 0);
        if (distinctAfterSwap1 == distinctAfterSwap2)
          return true;
      }

    return false;
  }

  private int[] getCount(final String s) {
    int[] count = new int[26];
    for (final char c : s.toCharArray())
      ++count[c - 'a'];
    return count;
  }

  private int getDistinct(int[] count) {
    return (int) Arrays.stream(count).filter(c -> c > 0).count();
  }
}
*/
