class Solution {
    public int totalFruit(int[] tree) {
        int ans=0;
        Map<Integer, Integer> count = new HashMap<>();

        int l=0;
        for(int r=0; r<tree.length; r++) {
            count.put(tree[r], count.getOrDefault(tree[r],0)+1);
            while(count.size()>2) {
                count.put(tree[l], count.get(tree[l])-1);
                count.remove(tree[l], 0);
                l++;
            }
            ans = Math.max(ans,r-l+1);
        }
        return ans;
    }
}

        // int n = fruits.length;
        // HashMap<Integer,Integer> map = new HashMap();

        // int count = 0;
        // int maxCount = 0;
        // int idx = 0;
        // int freq = 1;

        // for(int i=0; i<n; i++) {
        //     if(map.size()==2 && map.containsKey(fruits[i])==false) {
        //         maxCount = Math.max(maxCount,count);
                
        //         count = count - (i-freq);
        //         map.remove(fruits[idx]);
        //         idx += i-freq;
        //     }

        //     if(i>0 && fruits[i]==fruits[i-1]) freq++;
        //     else freq = 1; 

        //     map.put(fruits[i],map.getOrDefault(fruits[i],0)+1);
        //     count++;
        // }
        // maxCount = Math.max(maxCount,count);
        // return maxCount;
//     }
// }

Related Topics-
Array
Hash Table
Sliding Window
